
#############################################################################################################
### USER OVERRIDES
### Anything custom you want to add, or RatOS configuration you want to override, do it here.
#############################################################################################################

[stepper_x]
endstop_pin: x_endstop_pin
homing_positive_dir: true
homing_retract_dist: 5.0
position_min: 0
position_max: 410
position_endstop: 410

[stepper_y]
endstop_pin: y_endstop_pin
homing_positive_dir: true
homing_retract_dist: 5.0
position_min: -5
position_max: 405
position_endstop: 405 # 400mm printer

[stepper_z]
endstop_pin: PG10
homing_positive_dir: false
homing_retract_dist: 5.0
position_min: -5
position_max: 500 # my printer is custom, 500 tall
position_endstop: 0

[probe]
z_offset: 0.0

[printer]
max_velocity: 1000
max_accel: 7500
max_accel_to_decel: 7500
max_z_velocity: 20
max_z_accel: 150
square_corner_velocity: 5



[gcode_macro RatOS]
variable_z_probe: "stowable"
variable_safe_home_x: 4
variable_safe_home_Y: 0
variable_homing_z_hop: 10
variable_stowable_probe_position_preflight: [ 35, 50 ]
variable_stowable_probe_position_side:      [  35, 1 ]
variable_stowable_probe_position_dock:      [  10, 1 ]
# exit/re-entry staging
variable_stowable_probe_position_exit:      [ 10, 50 ]

[bed_mesh]
speed: 250
horizontal_move_z: 8
mesh_min: 20,20
mesh_max:365,360
probe_count: 5,5
fade_start: 1.0
fade_end: 10.0
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: .2
relative_reference_index: 13 # this should be the center of a 5x5 bed mesh




[gcode_macro _ASSERT_PROBE_STATE]
description: ensures probe is in a known state; QUERY_PROBE must have been called before this macro!
gcode:
    ## QUERY_PROBE manually-verified results, when microswitch not depressed
    ## "TRIGGERED" -> 1 :: probe stowed
    ## "open"      -> 0 :: probe deployed
    {% set last_query_state = "stowed" if printer.probe.last_query == 1 else "deployed" %}

    {% if params.MUST_BE != last_query_state %}
        ## { action_raise_error("expected probe state to be {} but is {} ({})".format(params.MUST_BE, last_query_state, printer.probe.last_query)) }
        {% if params.MUST_BE == "stowed" %}
            STOW_IF_DEPLOYED
        {% elif params.MUST_BE == "deployed" %}
            DEPLOY_IF_STOWED
        {% endif %}
    {% else %}
        ## all good; update state
        SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=stowable_probe_state VALUE="'{ last_query_state }'"
    {% endif %}






# I modified Mikkel's version by switching x and y.  Y homes first in my version.
[homing_override]
set_position_z: -5 # this is the minimum allowed Z which means the nozzle cannot move closer to the bed, for safety.
axes: xyz
gcode:
    {% set x_homed = 'x' in printer.toolhead.homed_axes %}
    {% set y_homed = 'y' in printer.toolhead.homed_axes %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printer.toolhead.axis_maximum.x / 2 %}
	{% endif %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printer.toolhead.axis_maximum.y / 2 %}
	{% endif %}
	{% set z_hop = printer["gcode_macro RatOS"].homing_z_hop|float %}
	{% set z_probe = printer["gcode_macro RatOS"].z_probe|lower %}
  	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

    M400                        # Wait for moves to finish
    G90                         # Absolute positioning
    G0 Z{z_hop} F{z_speed}           # Hop Z-Axis

 {% if params.Y is defined or params.X is not defined and params.Z is not defined %}
		{% if printer["gcode_macro RatOS"].homing|lower == 'endstops' %}
			G28 Y
		{% elif printer["gcode_macro RatOS"].homing|lower == 'sensorless' %}
			HOME_Y_SENSORLESS
		{% endif %}
        {% set y_homed = True %}
    {% endif %}

    {% if params.X is defined or params.Y is not defined and params.Z is not defined %}
		{% if printer["gcode_macro RatOS"].homing|lower == 'endstops' %}
			G28 X
		{% elif printer["gcode_macro RatOS"].homing|lower == 'sensorless' %}
			HOME_X_SENSORLESS
		{% endif %}
        {% set x_homed = True %}
    {% endif %}
   
    {% if params.Z is defined or params.Y is not defined and params.X is not defined %}
        RESPOND MSG="Homing Z"
        {% if x_homed == False or y_homed == False %}
            M118 X and Y must be homed before homing Z
        {% else %}
			{% if z_probe == "stowable" %}
				DEPLOY_PROBE
            	G0 X{safe_home_x} Y{safe_home_y} F{speed}
				G28 Z
				G0 Z{z_hop + 5} F{z_speed}
				STOW_PROBE
			{% else %}
                QUERY_PROBE
                STOW_IF_DEPLOYED
                G0 X{ printer["gcode_macro RatOS"].stowable_probe_position_preflight[0] } Y{ printer["gcode_macro RatOS"].stowable_probe_position_preflight[1] } F{ speed }
                G0 X{ printer["gcode_macro RatOS"].stowable_probe_position_side[0] } Y{ printer["gcode_macro RatOS"].stowable_probe_position_side[1] } F{ speed }
				G0 X{safe_home_x} Y{safe_home_y} F{speed}
				G28 Z
				G0 Z{z_hop} F{z_speed} 
                G0 X{ printer["gcode_macro RatOS"].stowable_probe_position_side[0] } Y{ printer["gcode_macro RatOS"].stowable_probe_position_side[1] } F{ speed }
                G0 X{ printer["gcode_macro RatOS"].stowable_probe_position_preflight[0] } Y{ printer["gcode_macro RatOS"].stowable_probe_position_preflight[1] } F{ speed }
			{% endif %}
        {% endif %}
	{% endif %}

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
  CLEAR_PAUSE
  SAVE_GCODE_STATE NAME=start_print_state
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # {% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
  # STOWABLE_PROBE_BEGIN_BATCH
  # {% endif %}
  # Home if needed
  MAYBE_HOME
  ;M117 Z Tilt Adjust...
  ;Z_TILT_ADJUST
  
  M117 Heating bed...
  RESPOND MSG="Heating bed..."
  # Wait for bed to heat up to printing temperature
  M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) }
  # Run the customizable "AFTER_HEATING_BED" macro.
  # START_PRINT_AFTER_HEATING_BED
  # Run the customizable "BED_MESH" macro
  #_START_PRINT_BED_MESH
  
  M117 Heating Nozzle...
  # M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # PRIME_BLOB_CLEAN_NOZZLE
  M109 S200 
  # PURGE_PAUSE X=150 Y=150 LOCATION=back
  # NOZZLE_CLEAN

  # Adjust bed tilt
  Z_TILT_ADJUST
  M117 Rehoming after tilt adjustment...
  # Home again as Z will have changed after tilt adjustment and bed heating.
  G28 Z

  M118 Starting Bed mesh calibrate
  BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}

  RESTORE_GCODE_STATE NAME=start_print_state

  M117 Calibrate Z...
  CALIBRATE_Z  # added this for auto z calibration
  # Adjust the G-Code Z offset if needed
  # SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(0.0)|float} MOVE=1

  # {% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}  
  # STOWABLE_PROBE_END_BATCH
  # {% endif %}
  # Start heating extruder
  M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # Run the customizable "PARK" macro
  _START_PRINT_PARK
  # Wait for extruder to heat up
  M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
  _START_PRINT_AFTER_HEATING_EXTRUDER
  M117 Printing...
  RESPOND MSG="Printing..."
  G90

  M117 Setting z adjust {params.Z_ADJUST|default(0.0)|float}
  SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(0.0)|float} MOVE=1
  # SET_GCODE_OFFSET Z=-4.250
  # Set extrusion mode based on user configuration
  {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
    M83
  {% else %}
    M82
  {% endif %}
  G92 E0


[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
  DEPLOY_PROBE                                                                          ;  if euclid probe is deployed, stow it away
  M118 E1 Starting Calibrate Z
  BASE_CALIBRATE_Z
  M118 E1 Finished Calibrate Z
  M117



# from ProtoLoft, the nozzle and switch xy positions need to be tailored to your particular set-up
# the  max deviation is increased from ProtoLoft's version.  Maybe the difference between Klicky and Euclide
[z_calibration]
nozzle_xy_position:  4, 0            #<X,Y position for clicking the nozzle on the Z endstop>
switch_xy_position:  33, 24          #<X,Y position for clicking the probe's switch body on the Z endstop>
bed_xy_position:     200, 200        #<X,Y position for probing the bed, for instance the center point>
switch_offset:       0.5             #<offset of the switch trigger (read the Switch Offset section!)>
max_deviation:       5.0
clearance:           10 
lift_speed:          8
samples:             5
samples_tolerance:   0.1
samples_result:      median
start_gcode:         RETURN_EUCLID_TO_DOCK   #<macro name for attaching the probe>
before_switch_gcode: CALIBRATE_EUCLID    #<macro name for attaching the probe AFTER probing the nozzle>
end_gcode:           RETURN_EUCLID_TO_DOCK   #<macro name for docking the probe>



[gcode_macro STOW_IF_DEPLOYED]
description: if deployed, then stow it
gcode:
    {% set RatOS = printer["gcode_macro RatOS"] %}
    {% set speed = RatOS.macro_travel_speed|float * 60 %}
    {% if not printer.probe.last_query %}   
        G0 X{ RatOS.stowable_probe_position_preflight[0] } Y{ RatOS.stowable_probe_position_preflight[1] } F{ speed }
        G0 X{ RatOS.stowable_probe_position_exit[0] } Y{ RatOS.stowable_probe_position_exit[1] } F{ speed }
        G0 X{ RatOS.stowable_probe_position_dock[0] } Y{ RatOS.stowable_probe_position_dock[1] } F{ speed }
        G0 X{ RatOS.stowable_probe_position_side[0] } Y{ RatOS.stowable_probe_position_side[1] } F{ speed }
        G0 X{ RatOS.stowable_probe_position_preflight[0] } Y{ RatOS.stowable_probe_position_preflight[1] } F{ speed }
        error_if_probe_deployed                                                                 ; error trapping
    {% endif %}  

[gcode_macro DEPLOY_IF_STOWED]
description: if stowed, then deploy it
gcode:
    {% set RatOS = printer["gcode_macro RatOS"] %}
    {% set speed = RatOS.macro_travel_speed|float * 60 %}
    {% if printer.probe.last_query %}   
        G0 X{ RatOS.stowable_probe_position_preflight[0] } Y{ RatOS.stowable_probe_position_preflight[1] } F{ speed }
        G0 X{ RatOS.stowable_probe_position_exit[0] } Y{ RatOS.stowable_probe_position_side[1] } F{ speed }
        G0 X{ RatOS.stowable_probe_position_dock[0] } Y{ RatOS.stowable_probe_position_dock[1] } F{ speed }
        G0 X{ RatOS.stowable_probe_position_side[0] } Y{ RatOS.stowable_probe_position_exit[1] } F{ speed }
        G0 X{ RatOS.stowable_probe_position_preflight[0] } Y{ RatOS.stowable_probe_position_preflight[1] } F{ speed }
        error_if_probe_deployed                                                                 ; error trapping
    {% endif %}  



[gcode_macro RETURN_EUCLID_TO_DOCK]
gcode:
  M118 Returning Euclid to dock...
  STOW_PROBE

[gcode_macro CALIBRATE_EUCLID]
gcode:
    {% set RatOS = printer["gcode_macro RatOS"] %}
    {% set speed = RatOS.macro_travel_speed|float * 60 %}
    M118 Picking up Euclid for calibration...
    # this ensures that if the toolhead is over the Euclid probe dock that it doesn't accidently remove it when moving away.
    G0 X{ RatOS.stowable_probe_position_side[0] } Y{ RatOS.stowable_probe_position_side[1] } F{ speed }
    G0 X{ RatOS.stowable_probe_position_preflight[0] } Y{ RatOS.stowable_probe_position_preflight[1] } F{ speed }
    G0 X{ RatOS.stowable_probe_position_side[0] } Y{ RatOS.stowable_probe_position_side[1] } F{ speed }
    G0 X{ RatOS.stowable_probe_position_dock[0] } Y{ RatOS.stowable_probe_position_dock[1] } F{ speed }
    G4 P500
    G0 X{ RatOS.stowable_probe_position_exit[0] } Y{ RatOS.stowable_probe_position_exit[1] } F{ speed }
    G0 X{ RatOS.stowable_probe_position_preflight[0] } Y{ RatOS.stowable_probe_position_preflight[1] } F{ speed }




# Macro to perform a modified bed mesh calibration, this add partial bed meshing based on the print area, and works with Euclid
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIGINAL                                              # Assign new name to old function so calls to old function get new treatment

variable_buffer: 20

; Do not change any of the existing values below.
variable_last_area_start_x: -1 ; Do not change
variable_last_area_start_y: -1 ; Do not change
variable_last_area_end_x:   -1 ; Do not change
variable_last_area_end_y:   -1 ; Do not change

gcode:

  {% if params.FORCE_NEW_MESH != null %}
        { action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }
  {% endif %}
  {% if printer["bed_mesh"].profile_name == '' %}
        { action_respond_info("No existing bed mesh found.") }
        {% set last_area_end_x=-1 %}
  {% endif %}

  {% if printer.toolhead.homed_axes != "xyz" %}
        G28
  {% endif %}

  {% if params.PRINT_MIN %}
        { action_respond_info("print_min: %s" % params.PRINT_MIN) }
        { action_respond_info("print_max: %s" % params.PRINT_MAX) }
        
        {% set probeConfig = printer['configfile'].config["probe"] %}
        {% if probeConfig %}
            {% set OffsetX = probeConfig.x_offset|default(0)|float %}
            {% set OffsetY = probeConfig.y_offset|default(0)|float %}
        {% endif %}

        {% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}
        {% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}
        {% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}
        {% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}

        {% if last_area_start_x > 0 %}
            { action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }
        {% endif %}

        {% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}
                DEPLOY_PROBE                                                                            ; deploy Euclid Probe if needed
                  
            {% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}

                # Get bed_mesh config (probe count, mesh_min and mesh_max for x and y
                {% set bedMeshConfig = printer['configfile'].config["bed_mesh"] %}
                {% set minimum_probe_count = 3 %}
                {% if bedMeshConfig.algorithm == "bicubic" %}
                    {% set minimum_probe_count = 5 %}
                {% endif %}
                {% set probe_count = bedMeshConfig.probe_count.split(",") %}
                {% set probe_count_x = probe_count[0]|int %}
                {% if probe_count.__len__() > 1 %}
                    {% set probe_count_y = probe_count[1]|int %}
                {% else %}
                    {% set probe_count_y = probe_count_x|int %}
                {% endif %}
                {% set relative_reference_index = bedMeshConfig.relative_reference_index %}
                {% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
                {% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
                {% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
                {% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

                # If print area X is smaller than 50% of the bed size, change to to 3 probe counts for X instead of the default 
                {% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}
                    {% set probe_count_x = minimum_probe_count %}
                {% endif %}

                # If print area Y is smaller than 50% of the bed size, change to to 3 probe counts for Y instead of the default 
                {% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}
                    {% set probe_count_y = minimum_probe_count %}
                {% endif %}

                {% if print_min_x - buffer >= mesh_min_x %}
                    {% set mesh_min_x = print_min_x - buffer %}
                {% endif %}

                {% if print_min_y - buffer >= mesh_min_y %}
                    {% set mesh_min_y = print_min_y - buffer %}
                {% endif %}

                {% if print_max_x + buffer <= mesh_max_x %}
                    {% set mesh_max_x = print_max_x + buffer %}
                {% endif %}

                {% if print_max_y + buffer <= mesh_max_y %}
                    {% set mesh_max_y = print_max_y + buffer %}
                {% endif %}

                { action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }
                { action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }
                { action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }

                ; Set variables so they're available outside of macro
                SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}
                SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}
                SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}
                SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}

                {% if printer["gcode_macro status_meshing"] != null %}
                    status_meshing
                {% endif %}

                {% if relative_reference_index == 0 or relative_reference_index == null %}
                    BED_MESH_CALIBRATE_ORIGINAL mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}
                {% else %}
                    {% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
                    { action_respond_info("relative_reference_index: %s" % relative_reference_index) }
                    BED_MESH_CALIBRATE_ORIGINAL mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
                {% endif %}
            {% else %}
                {% if printer["gcode_macro status_meshing"] != null %}
                    status_meshing
                {% endif %}
                BED_MESH_CALIBRATE_ORIGINAL
            {% endif %}
            STOW_PROBE                                                                             ; dock Euclid Probe
        {% else %}
            { action_respond_info("No need to recreate Bed Mesh since it's same as current mesh or smaller") }
        {% endif %}
    {% else %}
        DEPLOY_PROBE                                                                      ; deploy Euclid Probe if needed
        {% if printer["gcode_macro status_meshing"] != null %}
            status_meshing
        {% endif %}
        BED_MESH_CALIBRATE_ORIGINAL
        STOW_PROBE                                                                          ; dock Euclid Probe
    {% endif %}
    {% if printer["gcode_macro status_ready"] != null %}
        status_ready
    {% endif %}




[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
  SAVE_GCODE_STATE NAME=prime_blob_state
  M117 Priming nozzle with prime blob..
  RESPOND MSG="Priming nozzle with prime blob.."
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
  # Absolute positioning
  G90 
  # Relative extrusion
  M83
  # Lift 5 mm
  G1 Z5 F{z_speed}
  # move to blob position
  G1 X{printer.toolhead.axis_maximum.x - 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F{speed} # I changed this line to work with auto z
  # Extrude a blob
  G1 F60 E20
  # 40% fan
  M106 S102 
  # Move the extruder up by 5mm while extruding, breaks away from blob
  G1 Z5 F100 E5  
  # Move to wipe position, but keep extruding so the wipe is attached to blob
  G1 F200 Y{printer.toolhead.axis_minimum.y + 25} E1 
  # Go down diagonally while extruding
  # Broken down in z moves under 2mm as a workaround for a tuning tower test.
  # The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
  G1 F200 Y{printer.toolhead.axis_minimum.y + 30} Z3.8 E0.5
  G1 F200 Y{printer.toolhead.axis_minimum.y + 35} Z2.6 E0.5
  G1 F200 Y{printer.toolhead.axis_minimum.y + 40} Z1.4 E0.5
  G1 F200 Y{printer.toolhead.axis_minimum.y + 45} Z0.2 E0.5
  # 0% fan
  M106 S0
  # small wipe line
  G1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.2 E0.6 
  # Break away wipe
  G1 F{speed} Y{printer.toolhead.axis_minimum.y + 100}
  RESTORE_GCODE_STATE NAME=prime_blob_state

[gcode_macro PRIME_BLOB_CLEAN_NOZZLE]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
  SAVE_GCODE_STATE NAME=prime_blob_clean_state
  M117 Priming nozzle with prime blob..
  RESPOND MSG="Priming nozzle with prime blob.."
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
  # Absolute positioning
  G90 
  # Relative extrusion
  M83
  # Lift 5 mm
  G1 Z5 F{z_speed}
  # move to blob position
  G1 X{printer.toolhead.axis_maximum.x - 5} Y{printer.toolhead.axis_minimum.y + 210} Z0.5 F{speed}
  # Extrude a blob
  G1 F60 E20
  # 40% fan
  M106 S102 
  # Move the extruder up by 5mm while extruding, breaks away from blob
  G1 Z5 F100 E5  
  # Move to wipe position, but keep extruding so the wipe is attached to blob
  G1 F200 Y{printer.toolhead.axis_minimum.y + 225} E1 
  # Go down diagonally while extruding
  # Broken down in z moves under 2mm as a workaround for a tuning tower test.
  # The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
  G1 F200 Y{printer.toolhead.axis_minimum.y + 230} Z3.8 E0.5
  G1 F200 Y{printer.toolhead.axis_minimum.y + 235} Z2.6 E0.5
  G1 F200 Y{printer.toolhead.axis_minimum.y + 240} Z1.4 E0.5
  G1 F200 Y{printer.toolhead.axis_minimum.y + 245} Z0.2 E0.5
  # 0% fan
  M106 S0
  # small wipe line
  G1 F200 Y{printer.toolhead.axis_minimum.y +250} Z0.2 E0.6 
  # Break away wipe
  G1 F{speed} Y{printer.toolhead.axis_minimum.y + 300}
  RESTORE_GCODE_STATE NAME=prime_blob_clean_state

[gcode_macro _START_PRINT_AFTER_HEATING_BED]
gcode:
  {% if printer["gcode_macro RatOS"].preheat_extruder|lower == 'true' %}
  M117 Pre-heating extruder...
  # Wait for extruder to reach 150 so an inductive probe (if present) is at a predictable temp. 
  # Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
  M104 S150
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM=150
  {% endif %}
  M117 Adjusting for tilt...
  # Adjust bed tilt
  Z_TILT_ADJUST
  M117 Rehoming after tilt adjustment...
  # Home again as Z will have changed after tilt adjustment and bed heating.
  G28 Z